import "Srl/srl";
import "libpthread.so.0";

module Pthread {
    class Thread {
    }
    
    [Yesterday 12:10 AM] سرمد خالد عبد الله ///  تاكد منه ليه كتب هالشي 
    
    class Mutex {​​​​​​​​​
    def data: array[Word[8], 40];
    }​​​​​​​​​
    
    class Cond {
    def data: array[Word[8], 48];
    }



    def Pthread: alias ptr[Thread];

    class  SchedParam {
       def schedPriority: Int;
    };

    class TimeSpec {
        def tvSec: ArchInt;
        def tvNsec: Int[64];
    };
    
    class ThreadAttributes {    
        def flags: Int;
        def stackSize: Int;
        def contentionScope: Int;
        def inheritSched: Int;         
        def detachState: Int;
        def sched: Int;
        def param: SchedParam;
        def startTime: TimeSpec;
        def deadLine: TimeSpec;
        def period: TimeSpec;
    }
    
    class pthread_mutex_lock{
       def pthread_mutex_lock : int;    
       
    }
    @expname [pthread_create]
    func createThread (
        pthread: ptr[Pthread], attr: ptr[ThreadAttributes], start_routine: ptr[func (ptr):ptr], arg: ptr
    ): Int;

    @expname [pthread_join]                    
    func joinThread (pthread: Pthread, retval:ptr[ptr]): Int;
    
    @expnamme [pthread_cond_wait]
    func pthread_cond_wait(pthread: ptr[Pthread], ptr[Mutex, Cond],  );
   
    @expnamme [pthread_mutex_lock]
    func pthread_mutex_lock(pthread: ptr[Pthread], ptr[ptr]);
   
    @expnamme [pthread_mutex_unlock]
    func pthread_mutex_unlock(pthread: ptr[Pthread], ptr[pthread_mutex_lock]);
      
    @expnamme [pthread_cond_signal]
    func pthread_cond_signal(pthread: ptr[Pthread], ptr[pthread_mutex_lock], ptr[pthread_cond_wait]);   
  
}
   

   

